import { EleventyRenderPlugin } from "@11ty/eleventy";
import { format } from "date-fns";
import eleventyNavigationPlugin from "@11ty/eleventy-navigation";
import { minify } from "html-minifier-terser";
import pluginRss from "@11ty/eleventy-plugin-rss";
import syntaxHighlight from "@11ty/eleventy-plugin-syntaxhighlight";
import markdownIt from "markdown-it";
import path from "path";
import "tsx/esm";
import { jsxToString } from "jsx-async-runtime";
import * as sass from "sass";
import browserslist from "browserslist";
import { transform, browserslistToTargets } from "lightningcss";
import { render as ArticleImage } from "./src/_components/ArticleImage.11ty.tsx";
import { render as ArticleByline } from "./src/_components/ArticleByline.11ty.tsx";


/** @param {import("@11ty/eleventy").UserConfig} eleventyConfig */
export default async function(eleventyConfig:any) {

	const markdownOptions = {
		html: true,
		breaks: false,
		linkify: true,
	};

	// HTML minification
	eleventyConfig.addTransform("htmlmin", async (content:string, outputPath:string) => {
		if (outputPath && outputPath.endsWith(".html")) {
			return await minify(content, {
				collapseBooleanAttributes: true,
				collapseWhitespace: true,
				html5: true,
				includeAutoGeneratedTags: true,
				minifyJS: true,
				processScripts: ["application/ld+json"],
			});
		}
		return content;
	});

	eleventyConfig.setQuietMode(false);

	// Filters
	eleventyConfig.addFilter("md", (content = "") => {
		return markdownIt(markdownOptions).render(content);
	});

	// Extensions
	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
		compile: function () {
			return async function (data:any) {
				let content = await this.defaultRenderer(data);
				const result = await jsxToString(content);
				return result;
			};
		}
	});
	
	//eleventyConfig.addTemplateFormats("11ty.jsx","11ty.tsx");

	// Credit: https://11ty.rocks/posts/process-css-with-lightningcss/
	eleventyConfig.addTemplateFormats("scss");

	eleventyConfig.addExtension("scss", {
		outputFileExtension: "css",
		compile: async function (inputContent:string, inputPath:string) {
			let parsed = path.parse(inputPath);
			if (parsed.name.startsWith("_")) {
				return;
			}

			let result = sass.compileString(inputContent, {
				loadPaths: [parsed.dir || "."],
				sourceMap: false,
			});

	    this.addDependencies(inputPath, result.loadedUrls);

			let targets = browserslistToTargets(browserslist("> 0.2% and not dead"));
			return async () => {
				let { code } = await transform({
					code: Buffer.from(result.css),
					minify: true,
					sourceMap: false,
					targets,
					filename: "",
				});
				return code;
			};

	  },
	});

	// Frontmatter
	eleventyConfig.setFrontMatterParsingOptions({
		excerpt: true,
		excerpt_separator: "<!-- excerpt -->",
		excerpt_alias: "excerpt",
	});

	// Server Options
	eleventyConfig.setServerOptions({
		module: "@11ty/eleventy-dev-server",
		liveReload: true,
		domDiff: true,
		port: 3000,
		watch: [
			"dist/css/main.css",
			"dist/images/**/*",
		],
		showAllHosts: true,
		encoding: "utf-8",
		showVersion: true,
		indexFileName: "index.html",
	});

	eleventyConfig.addPlugin(eleventyNavigationPlugin);
	eleventyConfig.addPlugin(EleventyRenderPlugin);

	// Passthrough configuration
	// https://www.11ty.dev/docs/copy/#passthrough-during-serve
	eleventyConfig.setServerPassthroughCopyBehavior("passthrough");

	// Libraries
	eleventyConfig.setLibrary("md", markdownIt(markdownOptions));

	// Credit: https://11ty.rocks/posts/creating-and-using-11ty-collections/#group-tags-together
	eleventyConfig.addCollection("allPosts", function (collectionApi) {
		return collectionApi.getFilteredByTags("posts").sort(function (a, b) {
			return b.date - a.date; // sort by date - descending
		});
	});

	// Shortcodes
	eleventyConfig.addShortcode("minifyJson", (json:string) => {
		return JSON.stringify(JSON.parse(json));
	});

	eleventyConfig.addShortcode("postDate", (date:string) => {
		return format(date, "MMMM do, yyyy");
	});

	// React Components
	eleventyConfig.addShortcode("ArticleImage", async (slug:string, alt:string) => {
		const result = await jsxToString(ArticleImage(slug, alt));
		return result;
	});

	eleventyConfig.addShortcode("ArticleByline", async (tags:string[], published:Date, updated?:Date) => {
		const result = await jsxToString(ArticleByline(tags, published, updated));
		return result;
	});

	// Passthroughs
	eleventyConfig.addPassthroughCopy({"src/fonts": "fonts"});
	eleventyConfig.addPassthroughCopy({"src/images/global": "images/global"});
	eleventyConfig.addPassthroughCopy({"src/images/posts": "images/posts"});
	eleventyConfig.addPassthroughCopy({"src/images/favicon": "/"});

	// Plugins
	eleventyConfig.addPlugin(eleventyNavigationPlugin);
	eleventyConfig.addPlugin(pluginRss);
	eleventyConfig.addPlugin(syntaxHighlight);

	return {
		dir: {
			input: "src",
			includes: "_components",
			layouts: "layouts",
			output: "dist",
			data: "data",
		},
		templateFormats: ["11ty.tsx", "liquid", "html", "md"],
		markdownTemplateEngine: "liquid",
		htmlTemplateEngine: "liquid",
	};
}
